You are an expert in Flutter, Dart, Riverpod, Freezed, Flutter Hooks, Dio, and Flutter Retrofit.
Key Principles

Create Retrofit-based API service interfaces in data/remote/api
Create Riverpod code generation providers in data/remote/api with _api_service_provider naming
Create model classes in data/models
Create request/response DTO classes in data/remote/api/dto
Create Repository abstract classes in data/repositories
Create Repository implementations in data/repositories
Create use cases in domain/usecases
Create domain failures in domain/failure using inheritance, not Freezed
Create data exceptions in data/errors using inheritance, not Freezed
Use functional and declarative programming patterns
Prefer composition over inheritance (except for errors/failures)
Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
Include units in variable names when applicable (e.g., distanceInKm, durationInMinutes)
Use @JsonKey with descriptive names for backend fields missing units (e.g., @JsonKey(name: "distance") double distanceInKm)

API Service Layer

Use @RestApi() annotation with Retrofit in data/remote/api
Create factory constructor that injects Dio (not HTTP)
Utilize HTTP method annotations (@GET, @POST, etc.)
Add authentication headers with @Headers({'accessToken': 'true'})
Use Future return types with ReadAllApiResponse wrapper
Implement required parameters with @Path and @Body annotations

Riverpod Providers

Generate providers using @riverpod annotation
Name providers as api_service_provider.dart
Inject dependencies through ref.watch
Inject Dio instance into API services
Provide configuration for baseUrl, tokenKey, etc.
Include logic for creating service and Repository instances

Model and DTO Classes

Create immutable data classes using Freezed
Use @JsonSerializable(fieldRename: FieldRename.snake)
Include part directives for generated code files
Models represent original data, DTOs are for API communication
Configure read-only fields with @JsonKey(includeFromJson: true, includeToJson: false)
Always include units in property names when the value represents a measurable quantity
For backend fields missing units, use @JsonKey to map to properly named variables with units

Repository Layer

Define interfaces with abstract classes as shown in Image 1
Repository interfaces should NOT use Either, just return ReadAllApiResponse directly
Repository implementations should NOT use Either, just pass through the API service responses
Inject ApiService into Repository implementations
Method implementations should delegate to API service calls directly

Use Cases and Error Handling

Use cases must be the FIRST place to use Either<CommonFailure, T> from fpdart
Implement domain-level error handling logic with CommonFailure hierarchy
Create domain failures using inheritance (not Freezed) in domain/failure
Create data exceptions using inheritance (not Freezed) in data/errors
Implement try-catch blocks in use cases to handle:

DioException (connectionTimeout, sendTimeout, receiveTimeout, other types)
FormatException
TypeError
LocalDatabaseException
General catch-all exceptions


Map HTTP status codes to failure types using switch statements
Log errors with AppLogger.I.e()
Return appropriate NetworkFailure or ServerFailure based on exception type

Code Generation and Project Structure

Generate code for Freezed, JSON Serializable, and Riverpod
Follow consistent file naming conventions (snake_case)
Use PascalCase for classes, camelCase for methods and variables
Implement clean architecture with separation of API, Repository, and use cases
No data/datasource layer - use data/remote/api instead

# 커밋 메시지 생성
자동 생성 커밋 메시지는 항상 한국어로 작성합니다. 다음 형식을 따르세요:
타입은 다음과 같습니다.

* feat: 새로운 기능 추가
* fix: 버그 수정
* refactor: 코드 리팩토링
* chore: 빌드 및 테스트 작업
* docs: 문서 수정
* style: 코드 스타일 변경
* perf: 성능 개선
* test: 테스트 코드 추가
* build: 빌드 작업